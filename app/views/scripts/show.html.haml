- content_for :title do
  = @script.name

%nav{"aria-label" => "breadcrumb"}
  %ol.breadcrumb
    %li.breadcrumb-item
      = link_to t(:title_scripts), scripts_path
    %li.breadcrumb-item.active{"aria-current" => "page"}= @script.name

.page-title
  %h3= @script.name
  .page-title-right-menu
    - if @script.archived
      = button_to t(:button_unarchive), unarchive_script_path(@script), class: 'btn btn-primary', form: { class: 'd-inline' }, method: :post
    - else
      = link_to t(:button_edit), edit_script_path(@script), class: 'btn btn-outline-secondary'
      = button_to t(:button_archive), archive_script_path(@script), class: 'btn btn-danger', form: { class: 'd-inline' }, method: :post

%dl.row
  %dt.col-sm-3.text-right= t(:field_body)
  %dd.col-sm-9= text_area_tag :body, @script.body, class: 'form-control script-area', rows: 15

  %dt.col-sm-3.text-right= t(:field_created_by)
  %dd.col-sm-9
    = @script.creater_name
    %span.text-muted
      (
      = time_ago_in_words(@script.created_at) + t(:ago)
      )

  %dt.col-sm-3.text-right= t(:field_updated_by)
  %dd.col-sm-9
    = @script.updater_name
    %span.text-muted
      (
      = time_ago_in_words(@script.updated_at) + t(:ago)
      )

  - unless @script.attachments.empty?
    %dt.col-sm-3.text-right= t(:field_attachments)
    %dd.col-sm-9
      %ul.attachments.list-unstyled
        - @script.attachments.order(:upload_file_name).each do |attachment|
          %li
            %i.fa.fa-file
            = link_to attachment.upload.filename, attachment.upload.url
            %span.text-muted
              (
              = number_to_human_size(attachment.upload.byte_size)
              \/
              = time_ago_in_words(attachment.updated_at) + t(:ago)
              )

.page-title
  %h4= t(:field_run)
  .page-title-right-menu
    = link_to 'javascript:void(0)', class: 'copy-button btn btn-info me-1', 'data-clipboard-text': "#{@script.remote_script(root_url)}", title: t(:copy_to_clipboard), 'data-placement': 'bottom' do
      %i.fa.fa-paperclip
    = link_to 'javascript:void(0)', class: 'copy-button btn btn-info', 'data-clipboard-text': "#{wrapped_sh_url(@script.guid)}", title: t(:copy_to_clipboard), 'data-placement': 'bottom' do
      = t(:button_wrapped)

%pre.run
  = @script.remote_script(root_url)

- unless @script.logs.empty?
  .page-title
    %h4= t(:title_logs)
    .page-title-right-menu.text-muted.logs-toolbar
      %form.d-flex.flex-row.align-items-center.flex-wrap
        %span#logs-count.me-1= @script.logs.size
        = t(:logs_count)
        .form-check.form-check-inline.ms-3
          = check_box_tag(:logs_auto_reload, "1", false, class: 'form-check-input')
          = label_tag(:logs_auto_reload, t(:auto_reload), class: 'form-check-label')
        = form_tag script_path(@script), method: 'get', class: 'd-inline-block ms-2' do
          = text_field_tag :keyword, @keyword, class: 'form-control auto-width', placeholder: t(:grep_logs)
          .dropdown.d-inline-block
            = link_to '#', class: 'btn btn-outline-secondary ms-1', 'data-bs-toggle': 'dropdown', style: 'margin-top:0' do
              %i.fa.fa-ellipsis-v
            .dropdown-menu.dropdown-menu-right
              = link_to t(:button_export_csv), logs_csv_path(@script), class: 'dropdown-item'
  .table-container
    %table.table.table-striped#logs-table
      %thead
        %tr
          %th= t(:field_host)
          %th= t(:field_uploaded)
          %th= t(:field_log_size)
      %tbody
      - @script.logs.select_without_result.order('created_at desc').each do |log|
        %tr{id: "log-#{log.id}", class: "logs #{@highlights.include?(log.id) ? 'table-success' : ''}"}
          %td= link_to log.host, log_path(log)
          %td= log.formatted_created_at
          %td= number_to_human_size log.result_bytes

:javascript
  $(function() {
    $('.copy-button').on('click', function(e) {
      var text = $(this).data('clipboard-text');
      navigator.clipboard.writeText(text).then(function() {
        var self = $(e.currentTarget);
        self.attr('title', '#{t(:copied)}');
        self.tooltip('show');
        setTimeout(function() {
          self.attr('title', '#{t(:copy_to_clipboard)}');
          self.tooltip('dispose');
        }, 3000);
      });
    });
    $('.script-area').each(function() {
      editorFromTextArea(this, {readOnly: true});
    });
    setInterval(function() {
      if ($('#logs_auto_reload').is(':checked')) {
        $(".table-container").load(window.location + ' #logs-table', function(response, status, xhr) {
          if (status == "error") {
            $("#logs-table").empty();
            $('#logs-count').text(0);
          } else {
            $('#logs-count').text($('#logs-table tbody tr').length);
          }
        });
      }
    }, 15 * 1000);
  });

